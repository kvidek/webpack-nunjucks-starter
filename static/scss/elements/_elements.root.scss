@use "sass:map";
@use "sass:math";
@use "../tools/tools.index" as tools;
@use "../settings/settings.index" as settings;

/**
 * Generate css variables for spacing if use-css-var is true
 */
@if settings.$use-css-var == true {
    :root {
        @each $size, $values in settings.$settings-spacings {
            #{settings.$css-variable-prefix}#{$size}: #{tools.fluid-sizing(
                    tools.map-deep-get(settings.$settings-spacings, $size, settings.$breakpoint-sm),
                    tools.map-deep-get(settings.$settings-spacings, $size, settings.$breakpoint-xl)
                )};
        }
        @each $size, $values in settings.$settings-typography {
            #{settings.$css-variable-prefix}#{$size}: #{tools.fluid-sizing(
                    tools.map-deep-get(settings.$settings-typography, $size, settings.$breakpoint-sm),
                    tools.map-deep-get(settings.$settings-typography, $size, settings.$breakpoint-xl)
                )};
        }
        @each $size, $values in settings.$settings-breakpoint {
            #{settings.$css-variable-prefix}breakpoint-#{$size}: #{map.get(settings.$settings-breakpoint, $size)};
        }
        @each $size, $values in settings.$settings-colors {
            #{settings.$css-variable-prefix}#{$size}: #{map.get(settings.$settings-colors, $size)};
        }
    }
}

/**
 * Generate css variables for spacing in > xxl breakpoint if use-css-var is true and use-container is false
 */
@if settings.$use-css-var == true and settings.$use-container == false {
    :root {
        @include tools.mq(null, xxl) {
            @each $size, $values in settings.$settings-spacings {
                #{settings.$css-variable-prefix}#{$size}: #{tools.fluid-sizing-xxl(
                        tools.map-deep-get(settings.$settings-spacings, $size, settings.$breakpoint-xl),
                        math.div(tools.map-deep-get(settings.$settings-spacings, $size, settings.$breakpoint-xl), settings.$breakpoint-xxl) *
                            settings.$breakpoint-xxxl *
                            settings.$big-viewport-coefficient
                    )};
            }
            @each $size, $values in settings.$settings-typography {
                #{settings.$css-variable-prefix}#{$size}: #{tools.fluid-sizing-xxl(
                        tools.map-deep-get(settings.$settings-typography, $size, settings.$breakpoint-xl),
                        math.div(tools.map-deep-get(settings.$settings-typography, $size, settings.$breakpoint-xl), settings.$breakpoint-xxl) *
                            settings.$breakpoint-xxxl *
                            settings.$big-viewport-coefficient
                    )};
            }
        }
    }
}
